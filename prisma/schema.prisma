generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id
  role                UserRole
  fullname            String
  email               String              @unique
  cpf                 String
  phone               String?
  password_hash       String
  created_at          DateTime            @default(now())
  answers             Answer[]
  essay_assessments   EssayAssessment[]
  QuizRequest         QuizRequest[]
  quizzes             Quiz[]
  subscription        Subscription[]
  text_capture_record TextCaptureRecord[]
  writing_resources   WritingResource[]

  @@map("users")
}

model EssayAssessment {
  id          String       @id
  status      String
  kind        String
  title       String
  content     String
  total_score Int?
  user_id     String
  created_at  DateTime     @default(now())
  topic_id    String?
  competences Competence[]
  topic       Topic?       @relation(fields: [topic_id], references: [id])
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("essay-assessments")
}

model Competence {
  id                  String          @id
  name                String?
  score_achieved      Int?
  possible_score      Int?
  essay_assessment_id String          @map("essay_assessment_id")
  essay_assessment    EssayAssessment @relation(fields: [essay_assessment_id], references: [id], onDelete: Cascade)
  suggestions         Suggestion[]

  @@map("competences")
}

model Suggestion {
  id            String     @id
  kind          String
  reference     String
  reason        String
  tip           String
  competence_id String     @map("competence_id")
  competence    Competence @relation(fields: [competence_id], references: [id], onDelete: Cascade)

  @@map("suggestions")
}

model Topic {
  id                String            @id
  title             String
  description       String
  exam_kind         ExamKind
  essay_assessments EssayAssessment[]

  @@map("topics")
}

model WritingResource {
  id                  String              @id
  status              String              @default("pending")
  theme               String
  thesis              String?
  author_id           String
  resource_references ResourceReference[]
  author              User                @relation(fields: [author_id], references: [id])

  @@map("writing-resources")
}

model ResourceReference {
  id                  String                @id
  kind                ResourceReferenceKind
  title               String
  value               String
  writing_resource_id String
  writing_resource    WritingResource       @relation(fields: [writing_resource_id], references: [id])

  @@map("resource-references")
}

model TextCaptureRecord {
  id         String   @id
  status     String
  content    String?
  created_at DateTime @default(now())
  author_id  String?
  file_id    String
  author     User?    @relation(fields: [author_id], references: [id])
  file       File     @relation(fields: [file_id], references: [id])

  @@map("text-capture-records")
}

model ApiKey {
  id         String   @id
  nickname   String
  secret     String
  created_at DateTime @default(now())

  @@map("api-key")
}

model Subscription {
  id          String  @id
  customer_id String?
  sub_id      String?
  status      String
  user_id     String
  gateway     String
  user        User    @relation(fields: [user_id], references: [id])

  @@map("subscriptions")
}

model QuizRequest {
  id         String   @id
  status     String
  file_id    String
  creator_id String
  created_at DateTime @default(now())
  quiz_id    String?
  creator    User     @relation(fields: [creator_id], references: [id])
  file       File     @relation(fields: [file_id], references: [id])
  quiz       Quiz?    @relation(fields: [quiz_id], references: [id])

  @@map("quiz-requests")
}

model Quiz {
  id           String        @id
  title        String
  creator_id   String
  created_at   DateTime      @default(now())
  questions    Question[]
  quiz_request QuizRequest[]
  creator      User          @relation(fields: [creator_id], references: [id])

  @@map("quizzes")
}

model Question {
  id             String   @id
  prompt         String
  options        String
  difficulty     Int
  correct_answer String
  quiz_id        String
  answer         Answer[]
  quiz           Quiz     @relation(fields: [quiz_id], references: [id])

  @@map("questions")
}

model Answer {
  id          String   @id
  value       String
  is_correct  Boolean?
  created_at  DateTime @default(now())
  author_id   String
  question_id String
  author      User     @relation(fields: [author_id], references: [id])
  question    Question @relation(fields: [question_id], references: [id])

  @@map("answers")
}

model File {
  id                   String              @id
  filename             String
  mimetype             String
  quiz_requests        QuizRequest[]
  text_capture_records TextCaptureRecord[]

  @@map("files")
}

enum UserRole {
  STUDENT
  TEACHER
}

enum ExamKind {
  ENEM
  PUC
  UERJ
}

enum ResourceReferenceKind {
  QUOTE
  BOOK
  MOVIE
  TV_SHOW
  HISTORICAL_FACT
}
