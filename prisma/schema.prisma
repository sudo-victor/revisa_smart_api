// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
}

enum ExamKind {
  ENEM
  PUC
  UERJ
}

model User {
  id                  String              @id
  role                UserRole
  fullname            String
  email               String              @unique
  cpf                 String
  phone               String?
  password_hash       String
  created_at          DateTime            @default(now())
  essay_assessments   EssayAssessment[]
  writing_resources   WritingResource[]
  text_capture_record TextCaptureRecord[]
  subscription        Subscription[]

  @@map("users")
}

model EssayAssessment {
  id          String       @id
  status      String
  kind        String
  title       String
  content     String
  total_score Int?
  competences Competence[]
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  created_at  DateTime     @default(now())
  topic       Topic?       @relation(fields: [topic_id], references: [id])
  topic_id    String?

  @@map("essay-assessments")
}

model Competence {
  id                  String          @id
  name                String?
  score_achieved      Int?
  possible_score      Int?
  essay_assessment    EssayAssessment @relation(fields: [essay_assessment_id], references: [id], onDelete: Cascade)
  essay_assessment_id String          @map("essay_assessment_id")
  suggestions         Suggestion[]

  @@map("competences")
}

model Suggestion {
  id            String     @id
  kind          String
  reference     String
  reason        String
  tip           String
  competence    Competence @relation(fields: [competence_id], references: [id], onDelete: Cascade)
  competence_id String     @map("competence_id")

  @@map("suggestions")
}

model Topic {
  id                String            @id
  title             String
  description       String
  essay_assessments EssayAssessment[]
  exam_kind         ExamKind

  @@map("topics")
}

model WritingResource {
  id                  String              @id
  status              String              @default("pending")
  theme               String
  thesis              String?
  author              User                @relation(fields: [author_id], references: [id])
  author_id           String
  resource_references ResourceReference[]

  @@map("writing-resources")
}

enum ResourceReferenceKind {
  QUOTE
  BOOK
  MOVIE
  TV_SHOW
  HISTORICAL_FACT
}

model ResourceReference {
  id                  String                @id
  kind                ResourceReferenceKind
  title               String
  value               String
  writing_resource    WritingResource       @relation(fields: [writing_resource_id], references: [id])
  writing_resource_id String

  @@map("resource-references")
}

model TextCaptureRecord {
  id         String   @id
  status     String
  content    String?
  photo_path String?
  created_at DateTime @default(now())
  author     User?    @relation(fields: [author_id], references: [id])
  author_id  String?

  @@map("text-capture-records")
}

model ApiKey {
  id         String   @id
  nickname   String
  secret     String
  created_at DateTime @default(now())

  @@map("api-key")
}

model Subscription {
  id          String  @id
  customer_id String?
  sub_id      String?
  status      String
  user        User    @relation(fields: [user_id], references: [id])
  user_id     String
  gateway     String

  @@map("subscriptions")
}
